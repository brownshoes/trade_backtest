from decimal import Decimal
import datetime

from order.order import Order

from utils.calc import percent_change

class OpenPosition:
    def __init__(self, buy_order: 'Order', trade_num) -> None:
        self.trade_num = trade_num
        self.buy_order: Order = buy_order

        # Track how much of the position has been sold
        self.percent_sold = Decimal(0)
        self.amount_sold = Decimal(0)
        self.times_sold = 0

        self.completed_sell_orders = []

        # Prevent closing the same position multiple times
        self.is_locked = False
        self.placed_sell_order = None

        # Statistics while position is open
        self.run_up = Decimal(0)
        self.drawdown = Decimal(0)
        self.bars = 0

    def record_sell(self, sell_order: 'Order') -> None:
        """Record a completed or placed sell order."""
        executed_amount = sell_order.execution.coin_amount
        self.amount_sold += executed_amount
        self.percent_sold = self.amount_sold / self.buy_order.execution.coin_amount
        self.times_sold += 1

        self.completed_sell_orders.append(sell_order)

        self.unlock()

    def lock(self, sell_order: str) -> None:
        """Lock the position to prevent multiple simultaneous closes."""
        self.is_locked = True
        self.placed_sell_order = sell_order

    def unlock(self) -> None:
        """Unlock the position after the current sell order is processed."""
        self.is_locked = False
        self.placed_sell_order = None

    def is_fully_sold(self) -> bool:
        """Return whether the position has been entirely sold."""
        return self.amount_sold >= self.buy_order.execution_coin_amount

    def remaining_amount(self) -> Decimal:
        """Return the remaining unsold coin amount."""
        return self.buy_order.execution_coin_amount - self.amount_sold

    def usd_value_remaining(self, current_price: Decimal) -> Decimal:
        """Return USD value of remaining unsold coins at current price."""
        return self.remaining_amount() * current_price

    def summary(self) -> str:
        """Human-readable status of the position."""
        return (
            f"Buy Order: {self.buy_order.order_string()} | "
            f"Sold: {self.amount_sold:.6f} ({self.percent_sold:.2%}) | "
            f"Remaining: {self.remaining_amount():.6f} | "
            f"Sells: {len(self.completed_sell_orders)}"
        )
    


class TradeStat:
    def __init__(self, trade_type, datetime, price, signal=None):
        self.type = trade_type     # e.g., "buy" or "sell"
        self.signal = signal       # can be added later
        self.datetime = datetime   # e.g., datetime object or string
        self.price = price         # float or int

class ClosedPosition2:
    def __init__(self, open_position):
        self.open_position = open_position
        self.order_list = [self.open_position.buy_order] + self.open_position.completed_sell_orders.copy()
        self.trade_stat_list = self._create_trade_stat_list()
        self.quantity = self.open_position.buy_order.order_coin_amount
        self.fees = self.calculate_fees()

        usd, percent = self.calculate_profit_and_loss()
        self.p_and_l = usd
        self.p_and_l_percent = percent


    def _create_trade_stat_list(self):
        trade_stat_list = []

        for order in self.order_list:
            trade_type = f"{order.order_side} {order.order_type}"
            trade_stat = TradeStat(
                trade_type=trade_type,
                datetime=order.execution.datetime,
                price=order.execution.market_price
            )
            trade_stat_list.append(trade_stat)

        return trade_stat_list
    
    def calculate_fees(self):
        return sum(order.execution.fee for order in self.order_list)
        
    def calculate_profit_and_loss(self):
        buy_amount = self.open_position.buy_order.execution.dollar_amount
        sell_amount = sum(order.execution.dollar_amount for order in self.open_position.completed_sell_orders)

        usd = sell_amount - buy_amount
        percent = percent_change(sell_amount, buy_amount)

        return usd, percent


class Statistics:
    def __init__(self, trading_state):
        self.trading_state = trading_state

        self.overview = None # df with columns: | trade # | portfolio $ | profit $ |
        self.total_p_and_l = None # Net Profit overall
        self.total_p_and_l_percent = None
        self.max_equity_drawdown = None # Greatest possible loss
        self.max_equity_drawdown_percent = None
        self._profitable_trades_percent = None #The percentage of winning trades generated by a strategy. Calculated by dividing the number of winning trades by the total number of closed trades generated by a strategy.

        self.total_trades = None # The total number of closed trades (both winning and losing) generated by a strategy.
        self.total_open_trades = None # The number of entries currently opened.
        self.winning_trades = None # The total number of winning trades generated by a strategy.
        self.losing_trades = None # The total number of losing trades generated by a strategy.
        self.percent_profitable = None #The percentage of winning trades generated by a strategy. Calculated by dividing the number of winning trades by the total number of closed trades generated by a strategy.
        self.avg_p_and_l = None # The sum of money gained or lost by the average trade generated by a strategy. Calculated by dividing the Net Profit by the overall number of closed trades.
        self.avg_p_and_l_percent = None 
        self.avg_winning_trade = None # The Net Profit divided by the number of Winning Trades generated by a strategy.
        self.avg_winning_trade_percent = None
        self.avg_losing_trade = None # The Net Loss divided by the number of Losing Trades generated by a strategy.
        self.avg_losing_trade_percent = None
        self.ratio_avg_win_to_loss = None # The average value of how many currency units you win for every unit you lose. This is calculated by dividing the average winning trade by the average losing trade.
        self.largest_winning_trade = None # The highest monetary profit and the highest percentage profit. 
        self.largest_winning_trade_percent = None
        self.avg_num_bars_in_trades = None # The average number of bars that elapsed during trades for all closed trades.
        self.avg_num_bars_in_winning_trades = None # The average number of bars that elapsed during trades for all winning trades.
        self.avg_num_bars_in_losing_trades = None # The average number of bars that elapsed during trades for all losing trades.




class ClosedPosition:
    def __init__(self, open_position):
        self.position = open_position
        self.buy_order = self.position.buy_order
        self.last_sell_order = self.position.completed_sell_orders[-1]

        self.position_open_time = self.buy_order.execution.datetime
        self.position_close_time = self.last_sell_order.execution.datetime
        self.position_duration = datetime.timedelta(
            seconds=self.last_sell_order.execution.timestamp - self.buy_order.execution.timestamp
        )

        self.market_at_open = self.buy_order.execution.market_price
        self.market_at_close = self.last_sell_order.execution.market_price
        self.market_percent_change = percent_change(self.market_at_close, self.market_at_open)

        # Dollar amount to open the position (includes buy fee)
        self.open_position_dollar_amount = self.buy_order.execution.dollar_amount + self.buy_order.execution.fee

        # Dollar value of all executed sell orders (excluding fees)
        self.close_dollar_amount = self._get_close_dollar_amount()

        # Net USD profit/loss
        self.dollar_outcome = self.close_dollar_amount - self.open_position_dollar_amount

        # Percent profit/loss
        self.percent_result = percent_change(self.close_dollar_amount, self.open_position_dollar_amount)

        self.total_fees = self._total_fees()

    def _get_close_dollar_amount(self):
        return sum((order.execution.dollar_amount for order in self.position.completed_sell_orders), Decimal(0))

    def _total_fees(self):
        return self.buy_order.execution.fee + sum(
            (order.execution.fee for order in self.position.completed_sell_orders),
            Decimal(0)
        )

    def closed_position_results_string(self):
        return (
            "\n Position Results"
            f"\n\tDuration: {self.position_duration}  Open({self.position_open_time}) -> Close({self.position_close_time})"
            f"\n\tMarket at Open: ${self.market_at_open:.2f}  Market at Close: ${self.market_at_close:.2f}  % Change: {self.market_percent_change:.2f}"
            f"\n\tPosition Open: ${self.open_position_dollar_amount:.2f}  Position Close: ${self.close_dollar_amount:.2f}"
            f"\n\tOutcome: ${self.dollar_outcome:.2f}  % Outcome: {self.percent_result:.2f}  Fees: ${self.total_fees:.2f}"
        )
